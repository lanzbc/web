"use strict";

exports.__esModule = true;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require("react-intl");

var _reactDualRangeSlider = require("../../src/styles/react-dual-range-slider.css");

var _reactDualRangeSlider2 = _interopRequireDefault(_reactDualRangeSlider);

var _defaultMessages = require("../lang/default-messages");

var _defaultMessages2 = _interopRequireDefault(_defaultMessages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ref = _react2.default.createElement("div", null);

var _ref2 = _react2.default.createElement("div", null);

var ReactDualRangeSlider = function (_React$Component) {
  (0, _inherits3.default)(ReactDualRangeSlider, _React$Component);

  function ReactDualRangeSlider(props) {
    (0, _classCallCheck3.default)(this, ReactDualRangeSlider);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));

    _this.state = _this.getStateFromProps(props);
    return _this;
  }

  ReactDualRangeSlider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.setState(this.getStateFromProps(nextProps));
  };

  ReactDualRangeSlider.prototype.getStateFromProps = function getStateFromProps(props) {

    var limits = props.limits.slice().sort(this.sortValues);
    var values = props.values.slice().sort(this.sortValues);
    var size = Math.abs(limits[1] - limits[0]);

    values[0] = values[0] < limits[0] ? limits[0] : values[0] > limits[1] ? limits[1] : values[0];
    values[1] = values[1] > limits[1] ? limits[1] : values[1] < limits[0] ? limits[0] : values[1];

    return {
      limits: limits,
      size: size,
      values: values,
      lock: props.lock,
      reverse: props.reverse,
      isSelDown: false,
      indexSelDown: 0,
      moveStartValue: 0,
      moveCurrentValue: 0,
      moveStartX: 0,
      moveCurrentX: 0,
      boxWidth: 0,
      formatFunc: props.formatFunc,
      onChange: props.onChange,
      rangeColor: props.rangeColor
    };
  };

  /**
   * startToMove
   * event triggered when the user starts to move
   */

  ReactDualRangeSlider.prototype.startToMove = function startToMove(event, index) {
    var clientX = event.touches && event.touches.length > 0 ? event.touches[0].clientX : event.clientX;
    this.setState({
      isSelDown: true,
      indexSelDown: index,
      moveStartValue: this.state.values[index],
      moveCurrentValue: this.state.values[index],
      moveStartX: clientX,
      moveCurrentX: clientX,
      boxWidth: event.currentTarget.parentElement.offsetWidth
    });
    event.stopPropagation();
  };

  /**
   * onMouseDown1
   * event triggered when the user mouse is down on slider 0
   */

  ReactDualRangeSlider.prototype.onMouseDown0 = function onMouseDown0(event) {
    this.startToMove(event, 0);
  };

  /**
   * onMouseDown1
   * event triggered when the user mouse is down on slider 1
   */

  ReactDualRangeSlider.prototype.onMouseDown1 = function onMouseDown1(event) {
    this.startToMove(event, 1);
  };

  ReactDualRangeSlider.prototype.onTouchStart0 = function onTouchStart0(event) {
    this.startToMove(event, 0);
  };

  ReactDualRangeSlider.prototype.onTouchStart1 = function onTouchStart1(event) {
    this.startToMove(event, 1);
  };

  ReactDualRangeSlider.prototype.onTouchMove = function onTouchMove(event) {

    this.move(event);
  };

  ReactDualRangeSlider.prototype.onTouchEnd = function onTouchEnd(event) {

    this.stopToMove(event);
  };

  /**
   * onMouseMove
   * event triggered when the user moves his mouse
   */

  ReactDualRangeSlider.prototype.onMouseMove = function onMouseMove(event) {

    this.move(event);
  };

  ReactDualRangeSlider.prototype.move = function move(event) {

    if (this.state.isSelDown) {
      var clientX = event.touches && event.touches.length > 0 ? event.touches[0].clientX : event.clientX;
      this.setState({
        moveCurrentX: clientX,
        moveCurrentValue: this.getMoveCurrentValue(clientX)
      });
    }
  };

  /**
   * getMoveCurrentValue
   * return the moving current value
   */

  ReactDualRangeSlider.prototype.getMoveCurrentValue = function getMoveCurrentValue(moveCurrentX) {
    var moveBoxProportion = (moveCurrentX - this.state.moveStartX) / this.state.boxWidth;
    if (this.state.reverse) {
      moveBoxProportion = moveBoxProportion * -1;
    }
    var moveIntoLimit = this.state.size * moveBoxProportion;
    var moveCurrentValue = this.state.moveStartValue + moveIntoLimit;
    moveCurrentValue = moveCurrentValue < this.state.limits[0] ? this.state.limits[0] : moveCurrentValue;
    moveCurrentValue = moveCurrentValue > this.state.limits[1] ? this.state.limits[1] : moveCurrentValue;

    return moveCurrentValue;
  };

  /**
   * formatOutput
   * return values well formated 
   */

  ReactDualRangeSlider.prototype.formatOutput = function formatOutput() {
    var values = this.getValues();
    return [this.state.formatFunc(values[0]), this.state.formatFunc(values[1])];
  };

  /**
   * stopToMove
   * event triggered when the user stop to move
   */

  ReactDualRangeSlider.prototype.stopToMove = function stopToMove(event) {
    if (this.state.isSelDown) {
      var values = this.getValues();
      this.setState({
        values: values,
        isSelDown: false
      });
      this.onChange();
    }
    event.stopPropagation();
  };

  /**
   * onMouseLeave
   * event triggered when the user leave the area with the mouse
   */

  ReactDualRangeSlider.prototype.onMouseLeave = function onMouseLeave(event) {
    this.stopToMove(event);
  };

  /**
   * onMouseUp
   * event triggered the user stop to drag a slider with the mouse
   */

  ReactDualRangeSlider.prototype.onMouseUp = function onMouseUp(event) {
    this.stopToMove(event);
  };

  /**
   * getLimits
   * return limits
   */

  ReactDualRangeSlider.prototype.getLimits = function getLimits() {
    return this.state.limits.slice();
  };

  /**
   * getDisplayLimits
   * return limits well formated
   */

  ReactDualRangeSlider.prototype.getDisplayLimits = function getDisplayLimits() {
    var limits = this.getLimits();
    if (this.state.reverse) {
      limits.reverse();
    }
    return [this.state.formatFunc(limits[0]), this.state.formatFunc(limits[1])];
  };

  /**
   * getValues
   * return current values, including when sliding
   */

  ReactDualRangeSlider.prototype.getValues = function getValues() {
    var values = this.state.values.slice();
    if (this.state.isSelDown) {
      values[this.state.indexSelDown] = this.state.moveCurrentValue;
    }
    return values;
  };

  ReactDualRangeSlider.prototype.getDisplayValues = function getDisplayValues() {
    var values = this.formatOutput().sort(this.sortValues);
    values = this.state.reverse ? values.reverse() : values;
    return values;
  };

  /**
   * getLeftPositions
   * return left position as a proportion
   */

  ReactDualRangeSlider.prototype.getLeftPositions = function getLeftPositions() {

    var values = this.getValues();

    var limits = this.getLimits();

    var size = this.state.size;

    var left = [values[0] - limits[0], values[1] - limits[0]];
    var leftPos = [left[0] / size * 100, left[1] / size * 100];

    if (this.state.reverse) {
      return [100 - leftPos[0], 100 - leftPos[1]];
    }
    return leftPos;
  };

  /**
   * sortValues
   * ascending sort method for arrays
   */

  ReactDualRangeSlider.prototype.sortValues = function sortValues(a, b) {
    return a - b;
  };

  /**
   * onChange
   * trigger the onChange method output
   */

  ReactDualRangeSlider.prototype.onChange = function onChange() {
    this.state.onChange(this.formatOutput().sort(this.sortValues));
  };

  /**
   * render
   * component rendering method 
   */

  ReactDualRangeSlider.prototype.render = function render() {

    var displayValues = this.getDisplayValues();

    var displayLimits = this.getDisplayLimits();

    var leftPos = this.getLeftPositions();

    var crossLinePos = leftPos.slice();
    crossLinePos.sort(this.sortValues);
    crossLinePos[1] = 100 - crossLinePos[1];

    var styleCrossline = {
      left: crossLinePos[0] + '%',
      right: crossLinePos[1] + '%',
      backgroundColor: this.props.rangeColor
    };

    var styleSelector0 = {
      left: leftPos[0] + '%',
      display: this.props.lock[0] === false ? 'block' : 'none'
    };

    var styleSelector1 = {
      left: leftPos[1] + '%',
      display: this.props.lock[1] === false ? 'block' : 'none'
    };

    var styleValueRange = {
      backgroundColor: this.props.rangeColor
    };

    return _react2.default.createElement(
      "div",
      { className: _reactDualRangeSlider2.default.component,
        onMouseMove: this.onMouseMove.bind(this),
        onMouseLeave: this.onMouseLeave.bind(this),
        onMouseUp: this.onMouseUp.bind(this),

        onTouchMove: this.onTouchMove.bind(this),
        onTouchEnd: this.onTouchEnd.bind(this),
        "data-name": "component" },
      _react2.default.createElement(
        "div",
        { className: _reactDualRangeSlider2.default.sliders },
        _react2.default.createElement(
          "div",
          { className: _reactDualRangeSlider2.default.line },
          _react2.default.createElement("div", { className: _reactDualRangeSlider2.default.crossLine, style: styleCrossline })
        ),
        _react2.default.createElement(
          "div",
          {
            className: [_reactDualRangeSlider2.default.selector, _reactDualRangeSlider2.default.selector0].join(' '),
            style: styleSelector0,
            onMouseDown: this.onMouseDown0.bind(this),
            onTouchStart: this.onTouchStart0.bind(this)
          },
          _ref
        ),
        _react2.default.createElement(
          "div",
          {
            className: [_reactDualRangeSlider2.default.selector, _reactDualRangeSlider2.default.selector1].join(' '),
            style: styleSelector1,
            onMouseDown: this.onMouseDown1.bind(this),
            onTouchStart: this.onTouchStart1.bind(this)
          },
          _ref2
        )
      ),
      _react2.default.createElement(
        "div",
        { className: _reactDualRangeSlider2.default.values },
        _react2.default.createElement(
          "div",
          { className: _reactDualRangeSlider2.default.limit },
          displayLimits[0]
        ),
        _react2.default.createElement(
          "div",
          { className: _reactDualRangeSlider2.default.value },
          displayValues[0]
        ),
        _react2.default.createElement("div", { className: _reactDualRangeSlider2.default.valueRange, style: styleValueRange }),
        _react2.default.createElement(
          "div",
          { className: _reactDualRangeSlider2.default.value },
          displayValues[1]
        ),
        _react2.default.createElement(
          "div",
          { className: _reactDualRangeSlider2.default.limit },
          displayLimits[1]
        )
      )
    );
  };

  return ReactDualRangeSlider;
}(_react2.default.Component);

exports.default = ReactDualRangeSlider;


ReactDualRangeSlider.displayName = "ReactDualRangeSlider";

ReactDualRangeSlider.propTypes = {
  limits: _react.PropTypes.arrayOf(_react.PropTypes.number),
  values: _react.PropTypes.arrayOf(_react.PropTypes.number),
  lock: _react.PropTypes.arrayOf(_react.PropTypes.bool),
  reverse: _react.PropTypes.bool,
  formatFunc: _react.PropTypes.func,
  onChange: _react.PropTypes.func,
  rangeColor: _react.PropTypes.string
};

ReactDualRangeSlider.defaultProps = {
  limits: [0, 100],
  values: [0, 100],
  lock: [false, false],
  reverse: false,
  formatFunc: function formatFunc(value) {
    return value;
  },
  onChange: function onChange() {},
  rangeColor: '#f60'
};